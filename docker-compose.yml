# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
#  DATABASE_URL: mongodb://db:27017/vapor_database
  
services:
  app:
    image: vapor-chakraui-template:latest
    build:
      context: .
    environment:
      <<: *shared_environment
# Uncomment if you are using a database and make sure db section is uncommented
#    depends_on:
#      - db
    ports:
      - '8080:8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.

    # Non Heroku run command
    # command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    
    # Run command that works with docker compose when Dockerfile is set up for Heroku
    command: ["./App", "serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]

# Uncomment lines below if you're connecting to a database
#  migrate:
#    image: vapor-chakraui-template:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--yes"]
#    deploy:
#      replicas: 0
#  revert:
#    image: vapor-chakraui-template:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--revert", "--yes"]
#    deploy:
#      replicas: 0
#  db:
#    image: mongo:latest
#    volumes:
#     - db_data:/data/db
#    restart: unless-stopped
#    ports:
#      - '27017:27017'
